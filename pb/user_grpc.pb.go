// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	AddUserWithResponseStream(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (UserService_AddUserWithResponseStreamClient, error)
	AddUsersWithRequestStream(ctx context.Context, opts ...grpc.CallOption) (UserService_AddUsersWithRequestStreamClient, error)
	AddUsersWithBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (UserService_AddUsersWithBidirectionalStreamClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/pb.UserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserWithResponseStream(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (UserService_AddUserWithResponseStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/pb.UserService/AddUserWithResponseStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceAddUserWithResponseStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_AddUserWithResponseStreamClient interface {
	Recv() (*UserResponseStream, error)
	grpc.ClientStream
}

type userServiceAddUserWithResponseStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceAddUserWithResponseStreamClient) Recv() (*UserResponseStream, error) {
	m := new(UserResponseStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) AddUsersWithRequestStream(ctx context.Context, opts ...grpc.CallOption) (UserService_AddUsersWithRequestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], "/pb.UserService/AddUsersWithRequestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceAddUsersWithRequestStreamClient{stream}
	return x, nil
}

type UserService_AddUsersWithRequestStreamClient interface {
	Send(*UserRequest) error
	CloseAndRecv() (*MultiUserResponse, error)
	grpc.ClientStream
}

type userServiceAddUsersWithRequestStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceAddUsersWithRequestStreamClient) Send(m *UserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceAddUsersWithRequestStreamClient) CloseAndRecv() (*MultiUserResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MultiUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) AddUsersWithBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (UserService_AddUsersWithBidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], "/pb.UserService/AddUsersWithBidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceAddUsersWithBidirectionalStreamClient{stream}
	return x, nil
}

type UserService_AddUsersWithBidirectionalStreamClient interface {
	Send(*UserRequest) error
	Recv() (*UserResponseStream, error)
	grpc.ClientStream
}

type userServiceAddUsersWithBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceAddUsersWithBidirectionalStreamClient) Send(m *UserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceAddUsersWithBidirectionalStreamClient) Recv() (*UserResponseStream, error) {
	m := new(UserResponseStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	AddUser(context.Context, *UserRequest) (*UserResponse, error)
	AddUserWithResponseStream(*UserRequest, UserService_AddUserWithResponseStreamServer) error
	AddUsersWithRequestStream(UserService_AddUsersWithRequestStreamServer) error
	AddUsersWithBidirectionalStream(UserService_AddUsersWithBidirectionalStreamServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) AddUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServiceServer) AddUserWithResponseStream(*UserRequest, UserService_AddUserWithResponseStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddUserWithResponseStream not implemented")
}
func (UnimplementedUserServiceServer) AddUsersWithRequestStream(UserService_AddUsersWithRequestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddUsersWithRequestStream not implemented")
}
func (UnimplementedUserServiceServer) AddUsersWithBidirectionalStream(UserService_AddUsersWithBidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddUsersWithBidirectionalStream not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserWithResponseStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).AddUserWithResponseStream(m, &userServiceAddUserWithResponseStreamServer{stream})
}

type UserService_AddUserWithResponseStreamServer interface {
	Send(*UserResponseStream) error
	grpc.ServerStream
}

type userServiceAddUserWithResponseStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceAddUserWithResponseStreamServer) Send(m *UserResponseStream) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_AddUsersWithRequestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).AddUsersWithRequestStream(&userServiceAddUsersWithRequestStreamServer{stream})
}

type UserService_AddUsersWithRequestStreamServer interface {
	SendAndClose(*MultiUserResponse) error
	Recv() (*UserRequest, error)
	grpc.ServerStream
}

type userServiceAddUsersWithRequestStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceAddUsersWithRequestStreamServer) SendAndClose(m *MultiUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceAddUsersWithRequestStreamServer) Recv() (*UserRequest, error) {
	m := new(UserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_AddUsersWithBidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).AddUsersWithBidirectionalStream(&userServiceAddUsersWithBidirectionalStreamServer{stream})
}

type UserService_AddUsersWithBidirectionalStreamServer interface {
	Send(*UserResponseStream) error
	Recv() (*UserRequest, error)
	grpc.ServerStream
}

type userServiceAddUsersWithBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceAddUsersWithBidirectionalStreamServer) Send(m *UserResponseStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceAddUsersWithBidirectionalStreamServer) Recv() (*UserRequest, error) {
	m := new(UserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddUserWithResponseStream",
			Handler:       _UserService_AddUserWithResponseStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddUsersWithRequestStream",
			Handler:       _UserService_AddUsersWithRequestStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddUsersWithBidirectionalStream",
			Handler:       _UserService_AddUsersWithBidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
